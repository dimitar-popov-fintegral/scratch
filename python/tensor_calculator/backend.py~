import os

from flask import Flask
from multiprocess import Pool, RawArray
from typing import Tuple

var_dict = dict()

##################################################
def init_worker(x: RawArray, x_shape: Tuple):
    var_dict["x"] = x
    var_dict["x_shape"] = x_shape


##################################################
def worker(worker: int):
    print("This is worker [{}]".format(worker))
    wrapped_x = numpy.frombuffer(var_dict["x"]).reshape(var_dict["x_shape"])
    return numpy.einsum('...jk,...jq->...jq', wrapped_x, wrapped_x)


##################################################
def create_app(test_config=None):
    """create the app for servicing requests for tensor ops"""
    n=100; s=100; t=500
    tensor_dim = (n,t,s)
    tensor = numpy.random.standard_normal(tensor_dim)
    print("Size of arr [{}]".format(sys.getsizeof(tensor)))

    raw_x = RawArray('d', n*s*t)
    wrapped_x = numpy.frombuffer(raw_x).reshape(tensor_dim)
    numpy.copyto(wrapped_x, tensor)

    init_worker(raw_x, tensor_dim)

    app = Flask(__name__, instance_relative_config=False)
    app.config.from_mapping(var_dict=var_dict)

    # a simple page that says hello
    @app.route('/')
    def tensor_cov():
        identity = request.query_string
        sum = 0
        for i in identity:
            sum += ord(i)
        worker(sum%3)

    return app
